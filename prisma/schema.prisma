// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String?    @unique
  email      String?    @unique
  bio        String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  tweets     Tweet[]
  Like       Like[]
  responses  Response[]
}

model Tweet {
  id         Int        @id @default(autoincrement())
  tweet      String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  likes      Like[] // 좋아요
  responses  Response[] // tweet에 달린 댓글
}

//댓글
model Response {
  id         Int      @id @default(autoincrement())
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId     Int
  tweetId    Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId    Int
  userId     Int

  @@id(name: "id", [userId, tweetId])
}
